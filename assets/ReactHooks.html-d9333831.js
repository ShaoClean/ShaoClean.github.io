import{$ as e,a0 as o,a1 as c,a4 as p}from"./framework-888972eb.js";const t={},s=p('<h1 id="react-hooks" tabindex="-1"><a class="header-anchor" href="#react-hooks" aria-hidden="true">#</a> React Hooks</h1><p>常见的hooks有</p><ol><li><p>useState</p></li><li><p>useEffect</p></li></ol><p>该hook接受两个参数：</p><ul><li>setup（回调函数）</li><li>dependencies（依赖数组） 可选</li></ul><p>组件会在初次渲染并执行完组件中的代码时最后调用<code>useEffect</code>中的<code>setup</code>函数。</p><p>如果该回调返回了一个函数，那么这个返回的函数会在该组件销毁的时候调用</p><p>其依赖的数据发生变化时，也就是<code>dependencie</code>数组中的数据发生变化时，<code>setup</code>函数会再一次触发。</p><p><strong>如果组件重新进行了渲染</strong></p><p>此时，如果<code>setup</code>函数中有返回一个函数（官方说法叫cleanup函数，cleanup函数中的代码叫clean code）。那么在重新渲染的时候：</p><p>1.先执行组件中的同步代码</p><p>2.然后执行cleanup函数</p><p>3.然后才是执行setup函数</p><p>而且<code>cleanup</code>函数中的<code>props</code>和<code>state</code>都是旧的。</p><ol start="3"><li><p>useRef</p></li><li><p>useContext</p></li><li><p>useCallback</p></li></ol>',15),a=[s];function l(d,i){return o(),c("div",null,a)}const r=e(t,[["render",l],["__file","ReactHooks.html.vue"]]);export{r as default};
