const t=JSON.parse('{"key":"v-12da0abf","path":"/study/frontend/js/prototype.html","title":"原型","lang":"zh-CN","frontmatter":{"icon":"javascript","date":"2023-02-09T00:00:00.000Z","category":["前端","JS"],"tag":["原型","学习笔记"],"description":"原型 js 是一门基于原型的语言，也就是说每一个对象（除了 null）都有原型。 当一个对象尝试访问自身的属性时，先会在自身上查找是否存在该属性；如果不存在，则会往该对象的原型对象上找是否存在；如果还是不存在，则会继续往该原型对象的原型对象上继续找，直到找到该属性或者到达原型链的顶端才结束查找。 现在有两个基本结论： 每一个函数都有一个属性：prototype，也就是原型对象 每一个实例都有一个属性：__proto__,该属性指向该实例的构造函数的原型对象","head":[["meta",{"property":"og:url","content":"https://doc.shaoclean.top/study/frontend/js/prototype.html"}],["meta",{"property":"og:site_name","content":"clog"}],["meta",{"property":"og:title","content":"原型"}],["meta",{"property":"og:description","content":"原型 js 是一门基于原型的语言，也就是说每一个对象（除了 null）都有原型。 当一个对象尝试访问自身的属性时，先会在自身上查找是否存在该属性；如果不存在，则会往该对象的原型对象上找是否存在；如果还是不存在，则会继续往该原型对象的原型对象上继续找，直到找到该属性或者到达原型链的顶端才结束查找。 现在有两个基本结论： 每一个函数都有一个属性：prototype，也就是原型对象 每一个实例都有一个属性：__proto__,该属性指向该实例的构造函数的原型对象"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-09T14:02:13.000Z"}],["meta",{"property":"article:tag","content":"原型"}],["meta",{"property":"article:tag","content":"学习笔记"}],["meta",{"property":"article:published_time","content":"2023-02-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-09T14:02:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-09T00:00:00.000Z\\",\\"dateModified\\":\\"2023-02-09T14:02:13.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1675951333000,"updatedTime":1675951333000,"contributors":[{"name":"clean","email":"1518136109@qq.com","commits":1}]},"readingTime":{"minutes":1.33,"words":399},"filePathRelative":"study/frontend/js/prototype.md","localizedDate":"2023年2月9日","excerpt":"<h1> 原型</h1>\\n<p>js 是一门基于原型的语言，也就是说每一个对象（除了 null）都有原型。</p>\\n<p>当一个对象尝试访问自身的属性时，先会在自身上查找是否存在该属性；如果不存在，则会往该对象的原型对象上找是否存在；如果还是不存在，则会继续往该原型对象的原型对象上继续找，直到找到该属性或者到达原型链的顶端才结束查找。</p>\\n<p>现在有两个基本结论：</p>\\n<ul>\\n<li>每一个函数都有一个属性：<code>prototype</code>，也就是原型对象</li>\\n<li>每一个实例都有一个属性：<code>__proto__</code>,该属性指向该实例的构造函数的原型对象</li>\\n</ul>","autoDesc":true}');export{t as data};
