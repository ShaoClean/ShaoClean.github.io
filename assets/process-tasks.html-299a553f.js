const s=JSON.parse('{"key":"v-4a0df5f1","path":"/study/frontend/js/process-tasks.html","title":"任务队列的中断和恢复","lang":"zh-CN","frontmatter":{"icon":"javascript","date":"2023-08-07T00:00:00.000Z","category":["前端","JS"],"tag":["任务队列","学习笔记"],"description":"任务队列的中断和恢复 /** * 依次顺序执行一系列任务 * 所有任务全部完成后可以得到每个任务的执行结果 * 需要返回两个方法，start用于启动任务， pause用于暂停任务 * 每个任务具有原子性，即不可中断，只能在两个任务之间中断 * @param {...Function} tasks 任务列表，每个任务无参、异步 */ export default function processTasks(...tasks) { \\tlet isPause = true; \\tconst result = []; \\treturn { \\t\\tasync start() { \\t\\t\\tif (!isPause) return; \\t\\t\\tisPause = false; \\t\\t\\tconsole.log(\\"开始执行任务\\"); \\t\\t\\twhile (tasks.length) { \\t\\t\\t\\tconst task = tasks.shift(); \\t\\t\\t\\tconst res = await task(); \\t\\t\\t\\tconsole.log(\\"任务执行完成，得到结果：\\", res); \\t\\t\\t\\tresult.push(res); \\t\\t\\t\\tif (isPause) { \\t\\t\\t\\t\\tconsole.log(\\"任务暂停\\"); \\t\\t\\t\\t\\tbreak; \\t\\t\\t\\t} \\t\\t\\t} \\t\\t\\tif (!tasks.length) { \\t\\t\\t\\tisPause = true; \\t\\t\\t\\treturn result; \\t\\t\\t} \\t\\t}, \\t\\tpause() { \\t\\t\\tisPause = true; \\t\\t}, \\t}; }","head":[["meta",{"property":"og:url","content":"https://doc.shaoclean.top/study/frontend/js/process-tasks.html"}],["meta",{"property":"og:site_name","content":"clog"}],["meta",{"property":"og:title","content":"任务队列的中断和恢复"}],["meta",{"property":"og:description","content":"任务队列的中断和恢复 /** * 依次顺序执行一系列任务 * 所有任务全部完成后可以得到每个任务的执行结果 * 需要返回两个方法，start用于启动任务， pause用于暂停任务 * 每个任务具有原子性，即不可中断，只能在两个任务之间中断 * @param {...Function} tasks 任务列表，每个任务无参、异步 */ export default function processTasks(...tasks) { \\tlet isPause = true; \\tconst result = []; \\treturn { \\t\\tasync start() { \\t\\t\\tif (!isPause) return; \\t\\t\\tisPause = false; \\t\\t\\tconsole.log(\\"开始执行任务\\"); \\t\\t\\twhile (tasks.length) { \\t\\t\\t\\tconst task = tasks.shift(); \\t\\t\\t\\tconst res = await task(); \\t\\t\\t\\tconsole.log(\\"任务执行完成，得到结果：\\", res); \\t\\t\\t\\tresult.push(res); \\t\\t\\t\\tif (isPause) { \\t\\t\\t\\t\\tconsole.log(\\"任务暂停\\"); \\t\\t\\t\\t\\tbreak; \\t\\t\\t\\t} \\t\\t\\t} \\t\\t\\tif (!tasks.length) { \\t\\t\\t\\tisPause = true; \\t\\t\\t\\treturn result; \\t\\t\\t} \\t\\t}, \\t\\tpause() { \\t\\t\\tisPause = true; \\t\\t}, \\t}; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-07T14:37:24.000Z"}],["meta",{"property":"article:tag","content":"任务队列"}],["meta",{"property":"article:tag","content":"学习笔记"}],["meta",{"property":"article:published_time","content":"2023-08-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-07T14:37:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"任务队列的中断和恢复\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-07T00:00:00.000Z\\",\\"dateModified\\":\\"2023-08-07T14:37:24.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1691419044000,"updatedTime":1691419044000,"contributors":[{"name":"clean","email":"1518136109@qq.com","commits":1}]},"readingTime":{"minutes":0.64,"words":193},"filePathRelative":"study/frontend/js/process-tasks.md","localizedDate":"2023年8月7日","excerpt":"<h1> 任务队列的中断和恢复</h1>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token doc-comment comment\\">/**\\n * 依次顺序执行一系列任务\\n * 所有任务全部完成后可以得到每个任务的执行结果\\n * 需要返回两个方法，start用于启动任务， pause用于暂停任务\\n * 每个任务具有原子性，即不可中断，只能在两个任务之间中断\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span><span class=\\"token operator\\">...</span>Function<span class=\\"token punctuation\\">}</span></span> <span class=\\"token parameter\\">tasks</span> 任务列表，每个任务无参、异步\\n */</span>\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">default</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">processTasks</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token operator\\">...</span>tasks</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">let</span> isPause <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">const</span> result <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">async</span> <span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>isPause<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\tisPause <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\tconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"开始执行任务\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>tasks<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">const</span> task <span class=\\"token operator\\">=</span> tasks<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">shift</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">const</span> res <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> <span class=\\"token function\\">task</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\tconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"任务执行完成，得到结果：\\"</span><span class=\\"token punctuation\\">,</span> res<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\tresult<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>res<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>isPause<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t\\tconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"任务暂停\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\t<span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>tasks<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\tisPause <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">return</span> result<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n\\t\\t<span class=\\"token function\\">pause</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\tisPause <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{s as data};
