const t=JSON.parse('{"key":"v-01e11fce","path":"/study/frontend/js/js-async.html","title":"如何理解 JS 的异步","lang":"zh-CN","frontmatter":{"icon":"javascript","date":"2023-01-30T00:00:00.000Z","category":["前端","JS"],"tag":["js异步","学习笔记"],"description":"如何理解 JS 的异步 JS 是一门单线程的语言，它在浏览器的渲染主线程中执行，而忙碌的渲染主线程要处理很多复杂的任务，比如说解析 html、css 还有执行 js 等。 我们知道，在执行一些复杂任务的过程中，会非常的消耗时间，例如在执行 js 的过程中，需要执行计时器、事件监听、回调函数等。 遇到这些耗时的任务时，这样就会造成渲染主线程的阻塞，无法执行其他的任务。容易造成页面无法及时更新，造成浏览器卡死，用户无法得到反馈。 JS 的异步就可以解决这样的问题，将耗时的任务交给其它的线程处理，等待其它线程处理完毕，将事先的回调函数包装成任务，将这些任务依次的放到消息队列的尾部，等待渲染主线程的执行。","head":[["meta",{"property":"og:url","content":"https://doc.shaoclean.top/study/frontend/js/js-async.html"}],["meta",{"property":"og:site_name","content":"clog"}],["meta",{"property":"og:title","content":"如何理解 JS 的异步"}],["meta",{"property":"og:description","content":"如何理解 JS 的异步 JS 是一门单线程的语言，它在浏览器的渲染主线程中执行，而忙碌的渲染主线程要处理很多复杂的任务，比如说解析 html、css 还有执行 js 等。 我们知道，在执行一些复杂任务的过程中，会非常的消耗时间，例如在执行 js 的过程中，需要执行计时器、事件监听、回调函数等。 遇到这些耗时的任务时，这样就会造成渲染主线程的阻塞，无法执行其他的任务。容易造成页面无法及时更新，造成浏览器卡死，用户无法得到反馈。 JS 的异步就可以解决这样的问题，将耗时的任务交给其它的线程处理，等待其它线程处理完毕，将事先的回调函数包装成任务，将这些任务依次的放到消息队列的尾部，等待渲染主线程的执行。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-30T15:04:07.000Z"}],["meta",{"property":"article:tag","content":"js异步"}],["meta",{"property":"article:tag","content":"学习笔记"}],["meta",{"property":"article:published_time","content":"2023-01-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-30T15:04:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何理解 JS 的异步\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-30T00:00:00.000Z\\",\\"dateModified\\":\\"2023-01-30T15:04:07.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1675091047000,"updatedTime":1675091047000,"contributors":[{"name":"clean","email":"1518136109@qq.com","commits":1}]},"readingTime":{"minutes":1.02,"words":305},"filePathRelative":"study/frontend/js/js-async.md","localizedDate":"2023年1月30日","excerpt":"<h1> 如何理解 JS 的异步</h1>\\n<p>JS 是一门单线程的语言，它在浏览器的渲染主线程中执行，而忙碌的渲染主线程要处理很多复杂的任务，比如说解析 html、css 还有执行 js 等。</p>\\n<p>我们知道，在执行一些复杂任务的过程中，会非常的消耗时间，例如在执行 js 的过程中，需要执行计时器、事件监听、回调函数等。</p>\\n<p>遇到这些耗时的任务时，这样就会造成渲染主线程的阻塞，无法执行其他的任务。容易造成页面无法及时更新，造成浏览器卡死，用户无法得到反馈。</p>\\n<p>JS 的异步就可以解决这样的问题，将耗时的任务交给其它的线程处理，等待其它线程处理完毕，将事先的回调函数包装成任务，将这些任务依次的放到消息队列的尾部，等待渲染主线程的执行。</p>","autoDesc":true}');export{t as data};
