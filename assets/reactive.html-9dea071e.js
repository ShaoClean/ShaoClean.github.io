const n=JSON.parse(`{"key":"v-2ae3f4f9","path":"/study/frontend/vue/reactive.html","title":"响应式原理","lang":"zh-CN","frontmatter":{"icon":"vue","date":"2023-02-04T00:00:00.000Z","category":["前端","Vue"],"tag":["响应式原理","学习笔记"],"description":"响应式原理 defineProperty 实现响应式 将一个对象中的属性不断的递归进行数据劫持，实现响应式。 那么会遇到这么一个问题，如果对象属性多、嵌套层次深的情况下，会不断的进行递归，直至将整个对象中的所有属性完成数据响应式的创建。 这个过程会产生性能的问题。 而且监测不到对数组属性的操作，也无法监测到数据被删除时候的情况，而是 Vue 将这些方法进行了重写，从而实现监测。 // 1.定义一个基本的响应式方法 function defineReactive(obj, key, val) { // 5.如果存在多层的嵌套，需要递归 observe(val); Object.defineProperty(obj, key, { get() { console.log(key + \\" is read\\"); return val; }, set(newVal) { // 6.如果存在多层的嵌套，需要递归 observe(newVal); console.log(key + \\" is set as \\" + newVal); }, }); } // 2.测试defineReactive方法 // const obj = {} // const reactiveObj = defineReactive(obj,'a',1) // obj.a = 2 // 3.对象存在多个key时,自动赋值 function observe(obj) { if (typeof obj !== \\"object\\" || obj === null) return; Object.keys(obj).forEach((key) =&gt; { defineReactive(obj, key, obj[key]); }); } // 4.测试observe方法 const obj = { a: 1, b: 2, cObj: { c1: 3, c2: 4, }, arr: [1, 2, 3, 4], }; observe(obj); obj.a = 3; obj.cObj.c1; obj.arr.push(444);","head":[["meta",{"property":"og:url","content":"https://doc.shaoclean.top/study/frontend/vue/reactive.html"}],["meta",{"property":"og:site_name","content":"clog"}],["meta",{"property":"og:title","content":"响应式原理"}],["meta",{"property":"og:description","content":"响应式原理 defineProperty 实现响应式 将一个对象中的属性不断的递归进行数据劫持，实现响应式。 那么会遇到这么一个问题，如果对象属性多、嵌套层次深的情况下，会不断的进行递归，直至将整个对象中的所有属性完成数据响应式的创建。 这个过程会产生性能的问题。 而且监测不到对数组属性的操作，也无法监测到数据被删除时候的情况，而是 Vue 将这些方法进行了重写，从而实现监测。 // 1.定义一个基本的响应式方法 function defineReactive(obj, key, val) { // 5.如果存在多层的嵌套，需要递归 observe(val); Object.defineProperty(obj, key, { get() { console.log(key + \\" is read\\"); return val; }, set(newVal) { // 6.如果存在多层的嵌套，需要递归 observe(newVal); console.log(key + \\" is set as \\" + newVal); }, }); } // 2.测试defineReactive方法 // const obj = {} // const reactiveObj = defineReactive(obj,'a',1) // obj.a = 2 // 3.对象存在多个key时,自动赋值 function observe(obj) { if (typeof obj !== \\"object\\" || obj === null) return; Object.keys(obj).forEach((key) =&gt; { defineReactive(obj, key, obj[key]); }); } // 4.测试observe方法 const obj = { a: 1, b: 2, cObj: { c1: 3, c2: 4, }, arr: [1, 2, 3, 4], }; observe(obj); obj.a = 3; obj.cObj.c1; obj.arr.push(444);"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-05T05:02:52.000Z"}],["meta",{"property":"article:tag","content":"响应式原理"}],["meta",{"property":"article:tag","content":"学习笔记"}],["meta",{"property":"article:published_time","content":"2023-02-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-05T05:02:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"响应式原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-04T00:00:00.000Z\\",\\"dateModified\\":\\"2023-02-05T05:02:52.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"defineProperty 实现响应式","slug":"defineproperty-实现响应式","link":"#defineproperty-实现响应式","children":[]},{"level":2,"title":"Proxy 实现响应式","slug":"proxy-实现响应式","link":"#proxy-实现响应式","children":[]},{"level":2,"title":"关于Reflect","slug":"关于reflect","link":"#关于reflect","children":[]}],"git":{"createdTime":1675525575000,"updatedTime":1675573372000,"contributors":[{"name":"clean","email":"1518136109@qq.com","commits":2}]},"readingTime":{"minutes":2.62,"words":787},"filePathRelative":"study/frontend/vue/reactive.md","localizedDate":"2023年2月4日","excerpt":"<h1> 响应式原理</h1>\\n<h2> defineProperty 实现响应式</h2>\\n<p>将一个对象中的属性不断的递归进行数据劫持，实现响应式。</p>\\n<p>那么会遇到这么一个问题，如果对象属性多、嵌套层次深的情况下，会不断的进行递归，直至将整个对象中的所有属性完成数据响应式的创建。</p>\\n<p>这个过程会产生性能的问题。</p>\\n<p>而且监测不到对数组属性的操作，也无法监测到数据被删除时候的情况，而是 Vue 将这些方法进行了重写，从而实现监测。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 1.定义一个基本的响应式方法</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">defineReactive</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">obj<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> val</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 5.如果存在多层的嵌套，需要递归</span>\\n  <span class=\\"token function\\">observe</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  Object<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">defineProperty</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>key <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\" is read\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">return</span> val<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>newVal<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// 6.如果存在多层的嵌套，需要递归</span>\\n      <span class=\\"token function\\">observe</span><span class=\\"token punctuation\\">(</span>newVal<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>key <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\" is set as \\"</span> <span class=\\"token operator\\">+</span> newVal<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 2.测试defineReactive方法</span>\\n<span class=\\"token comment\\">// const obj = {}</span>\\n<span class=\\"token comment\\">// const reactiveObj = defineReactive(obj,'a',1)</span>\\n<span class=\\"token comment\\">// obj.a = 2</span>\\n\\n<span class=\\"token comment\\">// 3.对象存在多个key时,自动赋值</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">observe</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">obj</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> obj <span class=\\"token operator\\">!==</span> <span class=\\"token string\\">\\"object\\"</span> <span class=\\"token operator\\">||</span> obj <span class=\\"token operator\\">===</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n  Object<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">keys</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">key</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">defineReactive</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> obj<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">// 4.测试observe方法</span>\\n<span class=\\"token keyword\\">const</span> obj <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">a</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">b</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">cObj</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">c1</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">c2</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">arr</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token function\\">observe</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nobj<span class=\\"token punctuation\\">.</span>a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">;</span>\\nobj<span class=\\"token punctuation\\">.</span>cObj<span class=\\"token punctuation\\">.</span>c1<span class=\\"token punctuation\\">;</span>\\nobj<span class=\\"token punctuation\\">.</span>arr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">444</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
