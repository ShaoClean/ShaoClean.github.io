const t=JSON.parse('{"key":"v-5e399b01","path":"/study/frontend/js/new.html","title":"new 操作符","lang":"zh-CN","frontmatter":{"icon":"javascript","date":"2023-03-02T00:00:00.000Z","category":["前端","JS"],"tag":["new","学习笔记"],"description":"new 操作符 使用 new 操作符实例化一个新对象时主要做了以下事情： 创建一个空对象 将空对象的__proto__属性指向构造函数的prototype（相当于实例对象的proto指向构造函数的原型对象） 改变构造函数的 this 指向，指向空对象 返回结果。 这里需要注意，当构造函数没有返回值或者返回值为基本数据类型时是直接返回第一步中创建的对象的。 当构造函数返回的是一个引用数据类型的时候，返回值是引用数据类型。","head":[["meta",{"property":"og:url","content":"https://doc.shaoclean.top/study/frontend/js/new.html"}],["meta",{"property":"og:site_name","content":"clog"}],["meta",{"property":"og:title","content":"new 操作符"}],["meta",{"property":"og:description","content":"new 操作符 使用 new 操作符实例化一个新对象时主要做了以下事情： 创建一个空对象 将空对象的__proto__属性指向构造函数的prototype（相当于实例对象的proto指向构造函数的原型对象） 改变构造函数的 this 指向，指向空对象 返回结果。 这里需要注意，当构造函数没有返回值或者返回值为基本数据类型时是直接返回第一步中创建的对象的。 当构造函数返回的是一个引用数据类型的时候，返回值是引用数据类型。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-02T00:52:28.000Z"}],["meta",{"property":"article:tag","content":"new"}],["meta",{"property":"article:tag","content":"学习笔记"}],["meta",{"property":"article:published_time","content":"2023-03-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-02T00:52:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"new 操作符\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-02T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-02T00:52:28.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1677718348000,"updatedTime":1677718348000,"contributors":[{"name":"clean","email":"1518136109@qq.com","commits":1}]},"readingTime":{"minutes":0.89,"words":267},"filePathRelative":"study/frontend/js/new.md","localizedDate":"2023年3月2日","excerpt":"<h1> new 操作符</h1>\\n<p>使用 new 操作符实例化一个新对象时主要做了以下事情：</p>\\n<ol>\\n<li>\\n<p>创建一个空对象</p>\\n</li>\\n<li>\\n<p>将空对象的<code>__proto__</code>属性指向构造函数的<code>prototype</code>（相当于实例对象的<strong>proto</strong>指向构造函数的原型对象）</p>\\n</li>\\n<li>\\n<p>改变构造函数的 this 指向，指向空对象</p>\\n</li>\\n<li>\\n<p>返回结果。\\n这里需要注意，当构造函数没有返回值或者返回值为基本数据类型时是直接返回第一步中创建的对象的。\\n当构造函数返回的是一个引用数据类型的时候，返回值是引用数据类型。</p>\\n</li>\\n</ol>","autoDesc":true}');export{t as data};
