import{$ as n,a0 as a,a1 as s,a4 as p}from"./framework-19a42cda.js";const e={},t=p(`<h1 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h1><p>可以分为下面三大类</p><ul><li><p>数据的逻辑结构</p><ul><li><p>线性结构</p><p>线性表、栈（特殊线性表）、队列（特殊线性表）、字符串、数组、广义表</p></li><li><p>非线性结构</p><p>树形结构、图形结构</p></li></ul></li><li><p>数据的存储结构</p><ul><li>顺序存储</li><li>链式存储</li></ul></li><li><p>数据的运算</p></li></ul><p>​ 检索、排序、插入、删除、修改等</p><h2 id="_1-绪论" tabindex="-1"><a class="header-anchor" href="#_1-绪论" aria-hidden="true">#</a> 1.绪论</h2><h3 id="算法和算法分析" tabindex="-1"><a class="header-anchor" href="#算法和算法分析" aria-hidden="true">#</a> 算法和算法分析</h3><h4 id="算法特性" tabindex="-1"><a class="header-anchor" href="#算法特性" aria-hidden="true">#</a> 算法特性</h4><ul><li>有穷性：一个算法必须总是在执行有穷步之后结束，且每一步都在有穷事件内完成</li><li>确定性：算法中的每一条指令必须有确切的含义，没有二义性，在任何条件下只有唯一的一条执行路径，即对于相同的输入只能得到相同的输出</li><li>可行性：算法是可执行的，算法描述的操作可以通过已经实现的基本操作执行有限次来实现</li><li>输入：一个算法有0个或多个输入</li><li>输出：一个算法有一个或多个输出</li></ul><h4 id="算法设计要求" tabindex="-1"><a class="header-anchor" href="#算法设计要求" aria-hidden="true">#</a> 算法设计要求</h4><ul><li>正确性</li><li>可读性</li><li>健壮性</li><li>高效性</li></ul><h4 id="算法分析" tabindex="-1"><a class="header-anchor" href="#算法分析" aria-hidden="true">#</a> 算法分析</h4><p>如何衡量一个算法的好坏？ 一个好的算法首先要具备正确性，然后是健壮性，可读性，在几个方面都满足的情况下，主要考虑算法的效率，通过算法的效率高低来评判不同算法的优劣程度。 主要考虑下面两个方面：</p><ul><li>时间效率：指的是算法所耗费的时间</li><li>空间效率：指的是算法执行过程中所耗费的存储空间</li></ul><p><strong>1.算法时间效率的度量</strong> 算法运行时间 = 一个简单操作所需的时间 * 简单操作次数 = （每条语句频度 * 该语句执行一次所需的时间）求和</p><p>若有某个辅助函数f(n)，使得当n趋近于无穷大时，T(n)/f(n)的极限值为不等于0的常数，则称f(n)是T(n)的同数量级函数。 记作T(n)=O(f(n))，称O(f(n))喂算法的渐进时间复杂度（O是数量级的符号），简称时间复杂度</p><p><span style="color:red;">例</span>： 求<code>T(n) = 2n^3 + 3n^2 + 2n + 1</code>的时间复杂度</p><p>根据定义，需要找到一个辅助函数f(n)，当n趋近于无穷大时，使得T(n)/f(n) ～ 常数（0除外）。</p><p>因为n是趋近于无穷大的，所以可以得出T(n)的极限值为2n^3。</p><p>因此问题就变成了2n^3/f(n) ～ 常数（0除外），也就是说当n充分大的时候，T(n)的数量级为n^3，T(n)于n^3是同一个数量级的（同阶）</p><p>那么此时，易得f(n) = n^3，常数为2</p><p>所以T(n) = O(n^3)</p><p><strong>2.算法空间复杂度的度量</strong></p><p>空间复杂度：算法所需存储空间的度量（其中n为问题的规模（或大小） $$ S(n) = O(f(n)) $$ 算法要占据的空间可以是：</p><ul><li>1.算法本身要占据的空间，输入\\输出，指令，常数，变量等</li><li>2.算法要使用的辅助空间</li></ul><p><span style="color:red;">例</span>：</p><p>实现将数组a中的数据逆序的存放到数组b中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//算法1</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  t <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  a<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//算法2</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>、
	b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析：</p><p>在算法一中，涉及到了一个新的中间变量来存储，且这个变量每次的存储个数固定为1。所以可以可以得到算法1中的空间复杂度为1。用公式可以表示为： $$ S(n) = O(1) $$ 在算法二中，涉及到了一个新的数组用来转换。这个数据的长度个数为n的，所以空间复杂度为n。可以用公式表示为： $$ S(n) = O(n) $$</p><h2 id="_2-线性表" tabindex="-1"><a class="header-anchor" href="#_2-线性表" aria-hidden="true">#</a> 2.线性表</h2><h3 id="_1-线性表的定义和特点" tabindex="-1"><a class="header-anchor" href="#_1-线性表的定义和特点" aria-hidden="true">#</a> 1.线性表的定义和特点</h3><p>线性表是具有相同特性的数据元素的一个有限序列。</p><p>线性表的逻辑特征：</p><ul><li>1.在非空的线性表，有且仅有一个开始节点$a_1$，它没有直接前趋，而仅有一个直接后继$a_2$；</li><li>2.有且仅有一个中断节点$a_n$，它没有直接后继，而仅有一个直接前趋$a_{n-1}$</li><li>3.其余的内部节点$a_i(2 \\leq i \\leq n-1)$都有且仅有一个直接前趋$a_{i-1}$和一个直接后继$a_{i+1}$</li></ul><p>顺序存储结构存在问题：</p><ul><li>存储空间分配不灵活</li><li>运算的空间复杂度高</li></ul><h3 id="_2-线性表的类型定义" tabindex="-1"><a class="header-anchor" href="#_2-线性表的类型定义" aria-hidden="true">#</a> 2.线性表的类型定义</h3><p><strong>线性表的基本操作</strong></p><ul><li><p>1.InitList(&amp;L)</p><p>构造一个空的线性表L</p></li><li><p>2.DestoryList(&amp;L)</p><p>线性表L存在的情况下</p><p>销毁线性表L</p></li><li><p>3.ClearList(&amp;L)</p></li></ul><p>​ 线性表L存在的情况下</p><p>​ 将线性表L重置为空表</p><ul><li><p>4.ListEmpty(&amp;L)</p><p>线性表L存在的情况下</p></li></ul><p>​ 若线性表L为空表，则返回true；否则返回false。</p><ul><li>5.ListLength(&amp;L)</li></ul><p>​ 线性表L存在的情况下</p><p>​ 返回线性表L中的数据元素个数</p><ul><li>6.GetElem(L,i,&amp;e)</li></ul><p>​ 线性表L存在的情况下,1&lt;=i&lt;=ListLength(L)</p><p>​ 用e返回线性表L中第i个数据元素的值。</p><ul><li>7.LocateElem(L,e,compare())</li></ul><p>​ 线性表L存在的情况下,compare()是数据元素判定函数</p><p>​ 返回L中第一个与e满足compare()的数据元素的位序。若这样的数据元素不存在则返回值为0</p><ul><li>8.PriorElem(L,cur_e,&amp;pre_e)</li></ul><p>​ 线性表L存在的情况下，cur_e表示当前元素</p><p>​ 若cur_e是L的数据元素，且不是第一个，则用pre_e返回它的前驱，否则操作失败，pre_e无意义。</p><ul><li>9.NextElem(L,cur_e,&amp;next_e)</li></ul><p>​ 线性表L存在的情况下</p><p>​ 若cur_e是L的数据元素，且不是最后一个。则用next_e返回它的后继元素，否则操作失败，next_e无意义</p><ul><li>10.ListInsert(&amp;L,i,&amp;e)</li></ul><p>​ 线性表L存在的情况下,1&lt;=i&lt;=ListLength(L)+1</p><p>​ 在L的第i个位置之前插入新的数据元素e，L的长度加一</p><ul><li>11.ListDelete(&amp;L,i,&amp;e)</li></ul><p>​ 线性表L存在的情况下,1&lt;=i&lt;=ListLength(L)</p><p>​ 删除L的第i个数据元素，并用e返回其值，L的长度减一</p><ul><li>12.ListTraverse(&amp;L,visited())</li></ul><p>​ 线性表L存在的情况下</p><p>​ 依次对线性表中每个元素调用visited()函数</p><p>以上运算操作是逻辑结构上定义的运算。只要给出这些运算的功能是“做什么”，至于”如何做“等实现细节，只有待确定了存储结构之后才考虑</p><h3 id="_3-线性表的顺序表示和实现" tabindex="-1"><a class="header-anchor" href="#_3-线性表的顺序表示和实现" aria-hidden="true">#</a> 3.线性表的顺序表示和实现</h3><p>在计算机内，线性表有两种基本的存储结构：<code>顺序存储结构</code>和<code>链式存储结构</code></p><p>**顺序存储定义：**把逻辑上相邻的数据元素存储在物理上相邻的存储单元中的存储结构</p><p>所有数据元素的存储位置均可由第一个数据元素的存储位置得到： $$ LOC(a_i) = LOC(a_1) + (i-1)\\times l $$</p>`,72),l=[t];function i(o,c){return a(),s("div",null,l)}const u=n(e,[["render",i],["__file","1.html.vue"]]);export{u as default};
