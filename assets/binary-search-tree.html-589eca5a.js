const n=JSON.parse('{"key":"v-934ab7bc","path":"/study/basic/binary-search-tree.html","title":"二叉搜索树","lang":"zh-CN","frontmatter":{"icon":"computer","category":["数据结构"],"tag":["学习笔记"],"description":"二叉搜索树 class Node { constructor(key){ this.key = key this.left = null; this.right = null; } } class BinarySearchTree { constructor(){ this.root = null; } insert(key){ const node = new Node(key); if (this.root == null){ this.root = node; } else { this.insertNode(this.root, key); } } insertNode(node, key){ if (node.key &gt;= key){ // 左边 if (node.left == null){ node.left = new Node(key); } else { this.insertNode(node.left, key) } } else { if (node.right == null){ node.right = new Node(key); } else { this.insertNode(node.right, key) } } } // 中序遍历 // 以上行顺序访问BST所有节点的遍历方式，也就是从最小到最大的顺序访问所有节点 inOrderTraverse(cb){ this.inOrderTraverseNode(this.root, cb); } inOrderTraverseNode(node, cb){ if (node !== null){ this.inOrderTraverseNode(node.left, cb); cb(node.key); this.inOrderTraverseNode(node.right, cb); } } } const bst = new BinarySearchTree(); bst.insert(10); bst.insert(12); bst.insert(9); bst.insert(8); bst.insert(22); function a(v){ console.log(v); } console.log(bst); bst.inOrderTraverse(a)","head":[["meta",{"property":"og:url","content":"https://doc.shaoclean.top/study/basic/binary-search-tree.html"}],["meta",{"property":"og:site_name","content":"clog"}],["meta",{"property":"og:title","content":"二叉搜索树"}],["meta",{"property":"og:description","content":"二叉搜索树 class Node { constructor(key){ this.key = key this.left = null; this.right = null; } } class BinarySearchTree { constructor(){ this.root = null; } insert(key){ const node = new Node(key); if (this.root == null){ this.root = node; } else { this.insertNode(this.root, key); } } insertNode(node, key){ if (node.key &gt;= key){ // 左边 if (node.left == null){ node.left = new Node(key); } else { this.insertNode(node.left, key) } } else { if (node.right == null){ node.right = new Node(key); } else { this.insertNode(node.right, key) } } } // 中序遍历 // 以上行顺序访问BST所有节点的遍历方式，也就是从最小到最大的顺序访问所有节点 inOrderTraverse(cb){ this.inOrderTraverseNode(this.root, cb); } inOrderTraverseNode(node, cb){ if (node !== null){ this.inOrderTraverseNode(node.left, cb); cb(node.key); this.inOrderTraverseNode(node.right, cb); } } } const bst = new BinarySearchTree(); bst.insert(10); bst.insert(12); bst.insert(9); bst.insert(8); bst.insert(22); function a(v){ console.log(v); } console.log(bst); bst.inOrderTraverse(a)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-04T13:49:19.000Z"}],["meta",{"property":"article:tag","content":"学习笔记"}],["meta",{"property":"article:modified_time","content":"2023-06-04T13:49:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二叉搜索树\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-04T13:49:19.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1685886559000,"updatedTime":1685886559000,"contributors":[{"name":"clean","email":"1518136109@qq.com","commits":1}]},"readingTime":{"minutes":0.54,"words":162},"filePathRelative":"study/basic/binary-search-tree.md","localizedDate":"2023年6月4日","excerpt":"<h1> 二叉搜索树</h1>\\n<!--more-->\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">key</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>key <span class=\\"token operator\\">=</span> key\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>left <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>right <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">BinarySearchTree</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>root <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token function\\">insert</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">key</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">const</span> node <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Node</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>root <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>root <span class=\\"token operator\\">=</span> node<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">insertNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>root<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token function\\">insertNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">node<span class=\\"token punctuation\\">,</span> key</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">.</span>key <span class=\\"token operator\\">&gt;=</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// 左边</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">.</span>left <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n                node<span class=\\"token punctuation\\">.</span>left <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Node</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">insertNode</span><span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">.</span>right <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n                node<span class=\\"token punctuation\\">.</span>right <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Node</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">insertNode</span><span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 中序遍历</span>\\n    <span class=\\"token comment\\">// 以上行顺序访问BST所有节点的遍历方式，也就是从最小到最大的顺序访问所有节点</span>\\n    <span class=\\"token function\\">inOrderTraverse</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">cb</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">inOrderTraverseNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>root<span class=\\"token punctuation\\">,</span> cb<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token function\\">inOrderTraverseNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">node<span class=\\"token punctuation\\">,</span> cb</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>node <span class=\\"token operator\\">!==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">inOrderTraverseNode</span><span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">,</span> cb<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token function\\">cb</span><span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">.</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">inOrderTraverseNode</span><span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">,</span> cb<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token keyword\\">const</span> bst <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">BinarySearchTree</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nbst<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">insert</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nbst<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">insert</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">12</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nbst<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">insert</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">9</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nbst<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">insert</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">8</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nbst<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">insert</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">22</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">a</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">v</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>v<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>bst<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\nbst<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">inOrderTraverse</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
