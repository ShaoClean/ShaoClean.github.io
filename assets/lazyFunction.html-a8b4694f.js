const n=JSON.parse('{"key":"v-3e4ce3b6","path":"/study/frontend/js/lazyFunction.html","title":"惰性函数","lang":"zh-CN","frontmatter":{"icon":"javascript","date":"2022-09-09T00:00:00.000Z","category":["前端","JS"],"tag":["惰性函数","学习笔记"],"description":"惰性函数 函数执行的分支只会在函数第一次调用的时候执行，在第一次调用过程中，该函数会被覆盖为另一个按照合适方式执行的函数，下次执行的时候就执行覆盖后的函数 let a = 6; function test(arg){ console.log(\\"==============\\"); if(a == 5){ test = function(arg){ console.log(arg); } }else{ test = function(arg){ console.log(arg + 1000); } } return test(arg) } test(1) test(1) test(1) //============== //1001 //1001","head":[["meta",{"property":"og:url","content":"https://doc.shaoclean.top/study/frontend/js/lazyFunction.html"}],["meta",{"property":"og:site_name","content":"clog"}],["meta",{"property":"og:title","content":"惰性函数"}],["meta",{"property":"og:description","content":"惰性函数 函数执行的分支只会在函数第一次调用的时候执行，在第一次调用过程中，该函数会被覆盖为另一个按照合适方式执行的函数，下次执行的时候就执行覆盖后的函数 let a = 6; function test(arg){ console.log(\\"==============\\"); if(a == 5){ test = function(arg){ console.log(arg); } }else{ test = function(arg){ console.log(arg + 1000); } } return test(arg) } test(1) test(1) test(1) //============== //1001 //1001"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-10T09:16:51.000Z"}],["meta",{"property":"article:tag","content":"惰性函数"}],["meta",{"property":"article:tag","content":"学习笔记"}],["meta",{"property":"article:published_time","content":"2022-09-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-10T09:16:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"惰性函数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-09-09T00:00:00.000Z\\",\\"dateModified\\":\\"2022-12-10T09:16:51.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1662714220000,"updatedTime":1670663811000,"contributors":[{"name":"clean","email":"1518136109@qq.com","commits":2}]},"readingTime":{"minutes":0.59,"words":178},"filePathRelative":"study/frontend/js/lazyFunction.md","localizedDate":"2022年9月9日","excerpt":"<h1> 惰性函数</h1>\\n<p>函数执行的分支只会在函数第一次调用的时候执行，在第一次调用过程中，该函数会被覆盖为另一个按照合适方式执行的函数，下次执行的时候就执行覆盖后的函数</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">arg</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"==============\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>a <span class=\\"token operator\\">==</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function-variable function\\">test</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">arg</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n      console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>arg<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function-variable function\\">test</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">arg</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n      console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>arg <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1000</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span>arg<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">//==============</span>\\n<span class=\\"token comment\\">//1001</span>\\n<span class=\\"token comment\\">//1001</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
