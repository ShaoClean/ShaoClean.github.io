const n=JSON.parse(`{"key":"v-4c2cd23e","path":"/demo/frontend-engineer-config.html","title":"前端工程化配置文件","lang":"zh-CN","frontmatter":{"icon":"eye","date":"2023-02-13T00:00:00.000Z","category":["前端","前端工程化"],"tag":["学习笔记"],"description":"前端工程化配置文件 //webpack.config.js const path = require(\\"path\\"); const { VueLoaderPlugin } = require(\\"vue-loader\\"); const HtmlWebpackPlugin = require(\\"html-webpack-plugin\\"); const MiniCssExtractPlugin = require(\\"mini-css-extract-plugin\\"); const UglifyJsPlugin = require(\\"uglifyjs-webpack-plugin\\"); const CssMiniPlugin = require(\\"css-minimizer-webpack-plugin\\"); const webpack = require(\\"webpack\\"); const { CleanWebpackPlugin } = require(\\"clean-webpack-plugin\\"); module.exports = { // target: 'web', mode: \\"development\\", //项目入口文件，字符串形式 // entry: './src/index.js', //对象形式 entry: { index: \\"./src/home/index.js\\", \\"login.entry\\": \\"./src/login/login.entry.js\\", \\"register.entry\\": \\"./src/register/register.entry.jsx\\", }, //项目输出配置 output: { //打包后输出的文件名，固定名字 // filename: \\"bundle.js\\", //打包后输出的文件名，变量名字。这里的[name]值由entry决定，如果entry是字符串形式，则使用默认的名字main；如果entry是对象形式，则对象的键为打包后的文件名 filename: \\"js/[name].js\\", //也可以使用hash变量，每次打包后的值都不同 // filename: \\"[hash].js\\", //文件输出路径 path: path.resolve(__dirname, \\"./dist\\"), }, module: { rules: [ { test: /\\\\.vue$/, loader: \\"vue-loader\\", }, { test: /\\\\.jsx$/, loader: \\"babel-loader\\", }, { //匹配所有.css结尾的文件 test: /\\\\.css$/, //将匹配到的所有相关文件使用以下两个loader进行预处理，loader处理的顺序为从右到左 // use: ['style-loader','css-loader'], //要使用css剥离功能，就不需要用到style-loader了，而是转用为剥离用的loader use: [MiniCssExtractPlugin.loader, \\"css-loader\\"], }, { //匹配图片格式文件（但是打包时不能对html中的img标签进行打包），并忽略大小写 test: /\\\\.(png|svg|jpg|jpeg|gif)$/i, //启动webpack5中内置的ModuleAsset特性 type: \\"asset\\", parser: { //如果一个模块源码大小小于指定的maxSize值，模块会被作为一个Base64编码的字符串注入到打包结果中，否则模块文件将会被生成到输出的目标目录中。 //图片格式，正好可以使用Base64来做处理，所以可以巧妙地使用这一个parser dataUrlCondition: { maxSize: 4 * 1024, }, }, generator: { //[hash:6]表示使用6位哈希值，使用hash防止图片重名 //[ext]表示原本后缀值 filename: \\"images/[name].[hash:6][ext]\\", }, }, //html中直接使用img标签src加载图片的话，因为没有被依赖，图片将不会被打包。这个loader解决这个问题，图片会被打包，而且路径也处理妥当。 { test: /\\\\.html$/, loader: \\"html-withimg-loader\\", }, ], }, plugins: [ new VueLoaderPlugin(), new HtmlWebpackPlugin({ //src文件夹下模版的名称 filename: \\"index.html\\", //src文件夹下模版的地址 template: \\"./src/home/index.html\\", //和entry中的键名相对应 chunks: [\\"index\\"], inject: \\"head\\", scriptLoading: \\"defer\\", }), new HtmlWebpackPlugin({ filename: \\"login.html\\", template: \\"./src/login/login.html\\", chunks: [\\"login.entry\\"], inject: \\"body\\", scriptLoading: \\"module\\", }), new HtmlWebpackPlugin({ filename: \\"register.html\\", template: \\"./src/register/register.html\\", chunks: [\\"register.entry\\"], inject: \\"body\\", scriptLoading: \\"module\\", }), new webpack.ProvidePlugin({ $: \\"jquery\\", jQuery: \\"jquery\\", }), //剥离后使用Plugin生成css文件 new MiniCssExtractPlugin({ filename: \\"css/[name].css\\", chunkFilename: \\"css/[name].chunk.css\\", }), // 每次打包之前清除dist目录 new CleanWebpackPlugin(), ], //开发服务器配置 devServer: { //静态资源文件的路径 // static:{ // directory:path.join(__dirname,'dist') // }, //是否压缩 compress: true, //端口号 port: 8000, // 热启动 hot: true, }, //在loader对文件预处理之后的一个优化阶段，对资源文件进行一个优化（压缩、剥离等操作） optimization: { //在development模式下对代码进行压缩 minimize: true, minimizer: [ // new UglifyJsPlugin({sourceMap:true}), new UglifyJsPlugin(), new CssMiniPlugin(), ], // 将HtmlWebpackPlugin代码分割的多个文件更细分的分割 splitChunks: { // 1.通过chunks：all来启用代码的拆分 chunks: \\"all\\", // 2.通过minSize来调节分离出来的包的大小（注意被分离的包需要在node_modules中） minSize: 30 * 1024, // 3.修改分割后导出的包的名字 name: \\"public.chunk\\", // 4.缓存组。通过这个配置，将node_modules中特定的库给抽离出来 cacheGroups: { // 对象的名字可以随便起，为了方便理解建议用对应库的名称 jquery: { // 分割出来后文件的名称 name: \\"jquery-chunks\\", // 匹配node_modules中库的名称 test: /jquery/, chunks: \\"all\\", }, \\"lodash-es\\": { name: \\"lodash-es-chunks\\", test: /lodash-es/, chunks: \\"all\\", }, vue: { name: \\"vue-chunks\\", test: /vue/, chunks: \\"all\\", }, react: { name: \\"react-chunks\\", test: /react/, chunks: \\"all\\", }, \\"react-dom\\": { name: \\"react-dom-chunks\\", test: /react-dom/, chunks: \\"all\\", }, }, // 最后通过HtmlWebpackPlugin将分离出来的代码通过标签的形式注入到页面中 }, }, };","head":[["meta",{"property":"og:url","content":"https://doc.shaoclean.top/demo/frontend-engineer-config.html"}],["meta",{"property":"og:site_name","content":"clog"}],["meta",{"property":"og:title","content":"前端工程化配置文件"}],["meta",{"property":"og:description","content":"前端工程化配置文件 //webpack.config.js const path = require(\\"path\\"); const { VueLoaderPlugin } = require(\\"vue-loader\\"); const HtmlWebpackPlugin = require(\\"html-webpack-plugin\\"); const MiniCssExtractPlugin = require(\\"mini-css-extract-plugin\\"); const UglifyJsPlugin = require(\\"uglifyjs-webpack-plugin\\"); const CssMiniPlugin = require(\\"css-minimizer-webpack-plugin\\"); const webpack = require(\\"webpack\\"); const { CleanWebpackPlugin } = require(\\"clean-webpack-plugin\\"); module.exports = { // target: 'web', mode: \\"development\\", //项目入口文件，字符串形式 // entry: './src/index.js', //对象形式 entry: { index: \\"./src/home/index.js\\", \\"login.entry\\": \\"./src/login/login.entry.js\\", \\"register.entry\\": \\"./src/register/register.entry.jsx\\", }, //项目输出配置 output: { //打包后输出的文件名，固定名字 // filename: \\"bundle.js\\", //打包后输出的文件名，变量名字。这里的[name]值由entry决定，如果entry是字符串形式，则使用默认的名字main；如果entry是对象形式，则对象的键为打包后的文件名 filename: \\"js/[name].js\\", //也可以使用hash变量，每次打包后的值都不同 // filename: \\"[hash].js\\", //文件输出路径 path: path.resolve(__dirname, \\"./dist\\"), }, module: { rules: [ { test: /\\\\.vue$/, loader: \\"vue-loader\\", }, { test: /\\\\.jsx$/, loader: \\"babel-loader\\", }, { //匹配所有.css结尾的文件 test: /\\\\.css$/, //将匹配到的所有相关文件使用以下两个loader进行预处理，loader处理的顺序为从右到左 // use: ['style-loader','css-loader'], //要使用css剥离功能，就不需要用到style-loader了，而是转用为剥离用的loader use: [MiniCssExtractPlugin.loader, \\"css-loader\\"], }, { //匹配图片格式文件（但是打包时不能对html中的img标签进行打包），并忽略大小写 test: /\\\\.(png|svg|jpg|jpeg|gif)$/i, //启动webpack5中内置的ModuleAsset特性 type: \\"asset\\", parser: { //如果一个模块源码大小小于指定的maxSize值，模块会被作为一个Base64编码的字符串注入到打包结果中，否则模块文件将会被生成到输出的目标目录中。 //图片格式，正好可以使用Base64来做处理，所以可以巧妙地使用这一个parser dataUrlCondition: { maxSize: 4 * 1024, }, }, generator: { //[hash:6]表示使用6位哈希值，使用hash防止图片重名 //[ext]表示原本后缀值 filename: \\"images/[name].[hash:6][ext]\\", }, }, //html中直接使用img标签src加载图片的话，因为没有被依赖，图片将不会被打包。这个loader解决这个问题，图片会被打包，而且路径也处理妥当。 { test: /\\\\.html$/, loader: \\"html-withimg-loader\\", }, ], }, plugins: [ new VueLoaderPlugin(), new HtmlWebpackPlugin({ //src文件夹下模版的名称 filename: \\"index.html\\", //src文件夹下模版的地址 template: \\"./src/home/index.html\\", //和entry中的键名相对应 chunks: [\\"index\\"], inject: \\"head\\", scriptLoading: \\"defer\\", }), new HtmlWebpackPlugin({ filename: \\"login.html\\", template: \\"./src/login/login.html\\", chunks: [\\"login.entry\\"], inject: \\"body\\", scriptLoading: \\"module\\", }), new HtmlWebpackPlugin({ filename: \\"register.html\\", template: \\"./src/register/register.html\\", chunks: [\\"register.entry\\"], inject: \\"body\\", scriptLoading: \\"module\\", }), new webpack.ProvidePlugin({ $: \\"jquery\\", jQuery: \\"jquery\\", }), //剥离后使用Plugin生成css文件 new MiniCssExtractPlugin({ filename: \\"css/[name].css\\", chunkFilename: \\"css/[name].chunk.css\\", }), // 每次打包之前清除dist目录 new CleanWebpackPlugin(), ], //开发服务器配置 devServer: { //静态资源文件的路径 // static:{ // directory:path.join(__dirname,'dist') // }, //是否压缩 compress: true, //端口号 port: 8000, // 热启动 hot: true, }, //在loader对文件预处理之后的一个优化阶段，对资源文件进行一个优化（压缩、剥离等操作） optimization: { //在development模式下对代码进行压缩 minimize: true, minimizer: [ // new UglifyJsPlugin({sourceMap:true}), new UglifyJsPlugin(), new CssMiniPlugin(), ], // 将HtmlWebpackPlugin代码分割的多个文件更细分的分割 splitChunks: { // 1.通过chunks：all来启用代码的拆分 chunks: \\"all\\", // 2.通过minSize来调节分离出来的包的大小（注意被分离的包需要在node_modules中） minSize: 30 * 1024, // 3.修改分割后导出的包的名字 name: \\"public.chunk\\", // 4.缓存组。通过这个配置，将node_modules中特定的库给抽离出来 cacheGroups: { // 对象的名字可以随便起，为了方便理解建议用对应库的名称 jquery: { // 分割出来后文件的名称 name: \\"jquery-chunks\\", // 匹配node_modules中库的名称 test: /jquery/, chunks: \\"all\\", }, \\"lodash-es\\": { name: \\"lodash-es-chunks\\", test: /lodash-es/, chunks: \\"all\\", }, vue: { name: \\"vue-chunks\\", test: /vue/, chunks: \\"all\\", }, react: { name: \\"react-chunks\\", test: /react/, chunks: \\"all\\", }, \\"react-dom\\": { name: \\"react-dom-chunks\\", test: /react-dom/, chunks: \\"all\\", }, }, // 最后通过HtmlWebpackPlugin将分离出来的代码通过标签的形式注入到页面中 }, }, };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-13T06:50:07.000Z"}],["meta",{"property":"article:tag","content":"学习笔记"}],["meta",{"property":"article:published_time","content":"2023-02-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-13T06:50:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前端工程化配置文件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-13T00:00:00.000Z\\",\\"dateModified\\":\\"2023-02-13T06:50:07.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1676255399000,"updatedTime":1676271007000,"contributors":[{"name":"clean","email":"1518136109@qq.com","commits":2}]},"readingTime":{"minutes":4.17,"words":1252},"filePathRelative":"demo/frontend-engineer-config.md","localizedDate":"2023年2月13日","excerpt":"<h1> 前端工程化配置文件</h1>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">//webpack.config.js</span>\\n<span class=\\"token keyword\\">const</span> path <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"path\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> VueLoaderPlugin <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"vue-loader\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> HtmlWebpackPlugin <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"html-webpack-plugin\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> MiniCssExtractPlugin <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"mini-css-extract-plugin\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> UglifyJsPlugin <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"uglifyjs-webpack-plugin\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> CssMiniPlugin <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"css-minimizer-webpack-plugin\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> webpack <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"webpack\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> CleanWebpackPlugin <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"clean-webpack-plugin\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nmodule<span class=\\"token punctuation\\">.</span>exports <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// target: 'web',</span>\\n  <span class=\\"token literal-property property\\">mode</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"development\\"</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token comment\\">//项目入口文件，字符串形式</span>\\n  <span class=\\"token comment\\">// entry: './src/index.js',</span>\\n  <span class=\\"token comment\\">//对象形式</span>\\n  <span class=\\"token literal-property property\\">entry</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">index</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"./src/home/index.js\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token string-property property\\">\\"login.entry\\"</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"./src/login/login.entry.js\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token string-property property\\">\\"register.entry\\"</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"./src/register/register.entry.jsx\\"</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token comment\\">//项目输出配置</span>\\n  <span class=\\"token literal-property property\\">output</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//打包后输出的文件名，固定名字</span>\\n    <span class=\\"token comment\\">// filename: \\"bundle.js\\",</span>\\n    <span class=\\"token comment\\">//打包后输出的文件名，变量名字。这里的[name]值由entry决定，如果entry是字符串形式，则使用默认的名字main；如果entry是对象形式，则对象的键为打包后的文件名</span>\\n    <span class=\\"token literal-property property\\">filename</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"js/[name].js\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">//也可以使用hash变量，每次打包后的值都不同</span>\\n    <span class=\\"token comment\\">// filename: \\"[hash].js\\",</span>\\n    <span class=\\"token comment\\">//文件输出路径</span>\\n    <span class=\\"token literal-property property\\">path</span><span class=\\"token operator\\">:</span> path<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span>__dirname<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"./dist\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">module</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">rules</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>\\n      <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token literal-property property\\">test</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">\\\\.vue$</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token literal-property property\\">loader</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"vue-loader\\"</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token literal-property property\\">test</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">\\\\.jsx$</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token literal-property property\\">loader</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"babel-loader\\"</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//匹配所有.css结尾的文件</span>\\n        <span class=\\"token literal-property property\\">test</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">\\\\.css$</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token comment\\">//将匹配到的所有相关文件使用以下两个loader进行预处理，loader处理的顺序为从右到左</span>\\n        <span class=\\"token comment\\">// use: ['style-loader','css-loader'],</span>\\n        <span class=\\"token comment\\">//要使用css剥离功能，就不需要用到style-loader了，而是转用为剥离用的loader</span>\\n        <span class=\\"token literal-property property\\">use</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>MiniCssExtractPlugin<span class=\\"token punctuation\\">.</span>loader<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"css-loader\\"</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//匹配图片格式文件（但是打包时不能对html中的img标签进行打包），并忽略大小写</span>\\n        <span class=\\"token literal-property property\\">test</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">\\\\.(png|svg|jpg|jpeg|gif)$</span><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-flags\\">i</span></span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token comment\\">//启动webpack5中内置的ModuleAsset特性</span>\\n        <span class=\\"token literal-property property\\">type</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"asset\\"</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token literal-property property\\">parser</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token comment\\">//如果一个模块源码大小小于指定的maxSize值，模块会被作为一个Base64编码的字符串注入到打包结果中，否则模块文件将会被生成到输出的目标目录中。</span>\\n          <span class=\\"token comment\\">//图片格式，正好可以使用Base64来做处理，所以可以巧妙地使用这一个parser</span>\\n          <span class=\\"token literal-property property\\">dataUrlCondition</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token literal-property property\\">maxSize</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">4</span> <span class=\\"token operator\\">*</span> <span class=\\"token number\\">1024</span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token literal-property property\\">generator</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token comment\\">//[hash:6]表示使用6位哈希值，使用hash防止图片重名</span>\\n          <span class=\\"token comment\\">//[ext]表示原本后缀值</span>\\n          <span class=\\"token literal-property property\\">filename</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"images/[name].[hash:6][ext]\\"</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token comment\\">//html中直接使用img标签src加载图片的话，因为没有被依赖，图片将不会被打包。这个loader解决这个问题，图片会被打包，而且路径也处理妥当。</span>\\n      <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token literal-property property\\">test</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">\\\\.html$</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token literal-property property\\">loader</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"html-withimg-loader\\"</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">plugins</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>\\n    <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">VueLoaderPlugin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HtmlWebpackPlugin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">//src文件夹下模版的名称</span>\\n      <span class=\\"token literal-property property\\">filename</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"index.html\\"</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token comment\\">//src文件夹下模版的地址</span>\\n      <span class=\\"token literal-property property\\">template</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"./src/home/index.html\\"</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token comment\\">//和entry中的键名相对应</span>\\n      <span class=\\"token literal-property property\\">chunks</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"index\\"</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token literal-property property\\">inject</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"head\\"</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token literal-property property\\">scriptLoading</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"defer\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HtmlWebpackPlugin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token literal-property property\\">filename</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"login.html\\"</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token literal-property property\\">template</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"./src/login/login.html\\"</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token literal-property property\\">chunks</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"login.entry\\"</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token literal-property property\\">inject</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"body\\"</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token literal-property property\\">scriptLoading</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"module\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HtmlWebpackPlugin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token literal-property property\\">filename</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"register.html\\"</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token literal-property property\\">template</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"./src/register/register.html\\"</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token literal-property property\\">chunks</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"register.entry\\"</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token literal-property property\\">inject</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"body\\"</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token literal-property property\\">scriptLoading</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"module\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">webpack<span class=\\"token punctuation\\">.</span>ProvidePlugin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token literal-property property\\">$</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"jquery\\"</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token literal-property property\\">jQuery</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"jquery\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">//剥离后使用Plugin生成css文件</span>\\n    <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MiniCssExtractPlugin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token literal-property property\\">filename</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"css/[name].css\\"</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token literal-property property\\">chunkFilename</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"css/[name].chunk.css\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">// 每次打包之前清除dist目录</span>\\n    <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">CleanWebpackPlugin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n\\n  <span class=\\"token comment\\">//开发服务器配置</span>\\n  <span class=\\"token literal-property property\\">devServer</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//静态资源文件的路径</span>\\n    <span class=\\"token comment\\">// static:{</span>\\n    <span class=\\"token comment\\">//   directory:path.join(__dirname,'dist')</span>\\n    <span class=\\"token comment\\">// },</span>\\n    <span class=\\"token comment\\">//是否压缩</span>\\n    <span class=\\"token literal-property property\\">compress</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">//端口号</span>\\n    <span class=\\"token literal-property property\\">port</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">8000</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">// 热启动</span>\\n    <span class=\\"token literal-property property\\">hot</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token comment\\">//在loader对文件预处理之后的一个优化阶段，对资源文件进行一个优化（压缩、剥离等操作）</span>\\n  <span class=\\"token literal-property property\\">optimization</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//在development模式下对代码进行压缩</span>\\n    <span class=\\"token literal-property property\\">minimize</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">minimizer</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>\\n      <span class=\\"token comment\\">// new UglifyJsPlugin({sourceMap:true}),</span>\\n      <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">UglifyJsPlugin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">CssMiniPlugin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">// 将HtmlWebpackPlugin代码分割的多个文件更细分的分割</span>\\n    <span class=\\"token literal-property property\\">splitChunks</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// 1.通过chunks：all来启用代码的拆分</span>\\n      <span class=\\"token literal-property property\\">chunks</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"all\\"</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token comment\\">// 2.通过minSize来调节分离出来的包的大小（注意被分离的包需要在node_modules中）</span>\\n      <span class=\\"token literal-property property\\">minSize</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">30</span> <span class=\\"token operator\\">*</span> <span class=\\"token number\\">1024</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token comment\\">// 3.修改分割后导出的包的名字</span>\\n      <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"public.chunk\\"</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token comment\\">// 4.缓存组。通过这个配置，将node_modules中特定的库给抽离出来</span>\\n      <span class=\\"token literal-property property\\">cacheGroups</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 对象的名字可以随便起，为了方便理解建议用对应库的名称</span>\\n        <span class=\\"token literal-property property\\">jquery</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token comment\\">// 分割出来后文件的名称</span>\\n          <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"jquery-chunks\\"</span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token comment\\">// 匹配node_modules中库的名称</span>\\n          <span class=\\"token literal-property property\\">test</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">jquery</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token literal-property property\\">chunks</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"all\\"</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token string-property property\\">\\"lodash-es\\"</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"lodash-es-chunks\\"</span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token literal-property property\\">test</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">lodash-es</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token literal-property property\\">chunks</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"all\\"</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token literal-property property\\">vue</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"vue-chunks\\"</span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token literal-property property\\">test</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">vue</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token literal-property property\\">chunks</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"all\\"</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token literal-property property\\">react</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"react-chunks\\"</span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token literal-property property\\">test</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">react</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token literal-property property\\">chunks</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"all\\"</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token string-property property\\">\\"react-dom\\"</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"react-dom-chunks\\"</span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token literal-property property\\">test</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">react-dom</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token literal-property property\\">chunks</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"all\\"</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token comment\\">// 最后通过HtmlWebpackPlugin将分离出来的代码通过标签的形式注入到页面中</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
