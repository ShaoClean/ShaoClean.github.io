const n=JSON.parse('{"key":"v-ced048a2","path":"/study/frontend/js/branch.html","title":"分支优化","lang":"zh-CN","frontmatter":{"icon":"javascript","date":"2022-10-30T00:00:00.000Z","star":20,"category":["前端","JS"],"tag":["分支优化","学习笔记"],"description":"分支优化 //原本复杂结构 function cry(type){ if(type === \\"牛\\"){ console.log(\\"牛会哞哞叫\\"); }else if(type === \\"狗\\"){ console.log(\\"狗会汪汪叫\\"); }else if(type === \\"猫\\"){ console.log(\\"猫会喵喵叫\\"); }else{ console.log(\\"我也不知道怎么叫\\"); } } //改造1，判断的条件比较单一，当所有分支做的事情是类似时 function cry(type){ const map = { 牛:\\"牛会哞哞叫\\", 狗:\\"狗会汪汪叫\\", 猫:\\"猫会喵喵叫\\", } if(map[type]){ console.log(map[type]); }else{ console.log(\\"我也不知道怎么叫\\"); } } //改造2，判断的条件比较单一，当分支做的事情有自己的逻辑需要处理 function cry(type){ const map = { 牛:()=&gt;{ console.log(\\"牛在哞哞叫\\"); }, 狗:() =&gt; { console.log(\\"狗去跑去了\\"); }, 猫:() =&gt; { console.log(\\"猫在吃鱼\\"); }, } if(map[type]){ map[type]()//如果存在对应的映射关系，则执行相关的函数 }else{ console.log(\\"我也不知道怎么叫\\"); } } //改造3，判断的条件比较复杂，分支做的事情有自己的逻辑需要处理 function cry(type){ //定义一个数组，数组中每一项数组包含两项内容。 //数组第一个表示传入的参数符合哪一项的复杂条件。数组第二项表示符合第一项条件需要做的业务逻辑 const map = [ [ ()=&gt;type.includes(\\"牛\\"), ()=&gt;console.log(\\"牛在哞哞叫\\") ], [ ()=&gt;type.endsWith(\\"虎\\"), ()=&gt;console.log(\\"虎要吃小动物\\") ], [ ()=&gt;type.endsWith(\\"猫\\") &amp;&amp; type.length &lt;= 2, ()=&gt;console.log(\\"猫出去玩了\\") ] ] //传入的参数符合条件的一项 const target = map.find( m =&gt; m[0]()) if(target){ target[1]()//如果存在符合的，则执行相关的函数 }else{ console.log(\\"我也不知道怎么叫\\"); } } cry(\\"狗\\");","head":[["meta",{"property":"og:url","content":"https://doc.shaoclean.top/study/frontend/js/branch.html"}],["meta",{"property":"og:site_name","content":"clog"}],["meta",{"property":"og:title","content":"分支优化"}],["meta",{"property":"og:description","content":"分支优化 //原本复杂结构 function cry(type){ if(type === \\"牛\\"){ console.log(\\"牛会哞哞叫\\"); }else if(type === \\"狗\\"){ console.log(\\"狗会汪汪叫\\"); }else if(type === \\"猫\\"){ console.log(\\"猫会喵喵叫\\"); }else{ console.log(\\"我也不知道怎么叫\\"); } } //改造1，判断的条件比较单一，当所有分支做的事情是类似时 function cry(type){ const map = { 牛:\\"牛会哞哞叫\\", 狗:\\"狗会汪汪叫\\", 猫:\\"猫会喵喵叫\\", } if(map[type]){ console.log(map[type]); }else{ console.log(\\"我也不知道怎么叫\\"); } } //改造2，判断的条件比较单一，当分支做的事情有自己的逻辑需要处理 function cry(type){ const map = { 牛:()=&gt;{ console.log(\\"牛在哞哞叫\\"); }, 狗:() =&gt; { console.log(\\"狗去跑去了\\"); }, 猫:() =&gt; { console.log(\\"猫在吃鱼\\"); }, } if(map[type]){ map[type]()//如果存在对应的映射关系，则执行相关的函数 }else{ console.log(\\"我也不知道怎么叫\\"); } } //改造3，判断的条件比较复杂，分支做的事情有自己的逻辑需要处理 function cry(type){ //定义一个数组，数组中每一项数组包含两项内容。 //数组第一个表示传入的参数符合哪一项的复杂条件。数组第二项表示符合第一项条件需要做的业务逻辑 const map = [ [ ()=&gt;type.includes(\\"牛\\"), ()=&gt;console.log(\\"牛在哞哞叫\\") ], [ ()=&gt;type.endsWith(\\"虎\\"), ()=&gt;console.log(\\"虎要吃小动物\\") ], [ ()=&gt;type.endsWith(\\"猫\\") &amp;&amp; type.length &lt;= 2, ()=&gt;console.log(\\"猫出去玩了\\") ] ] //传入的参数符合条件的一项 const target = map.find( m =&gt; m[0]()) if(target){ target[1]()//如果存在符合的，则执行相关的函数 }else{ console.log(\\"我也不知道怎么叫\\"); } } cry(\\"狗\\");"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-11-30T13:02:03.000Z"}],["meta",{"property":"article:tag","content":"分支优化"}],["meta",{"property":"article:tag","content":"学习笔记"}],["meta",{"property":"article:published_time","content":"2022-10-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-30T13:02:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分支优化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-30T00:00:00.000Z\\",\\"dateModified\\":\\"2022-11-30T13:02:03.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1667117614000,"updatedTime":1669813323000,"contributors":[{"name":"clean","email":"1518136109@qq.com","commits":4}]},"readingTime":{"minutes":1.36,"words":409},"filePathRelative":"study/frontend/js/branch.md","localizedDate":"2022年10月30日","excerpt":"<h1> 分支优化</h1>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">//原本复杂结构</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">cry</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">type</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>type <span class=\\"token operator\\">===</span> <span class=\\"token string\\">\\"牛\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"牛会哞哞叫\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>type <span class=\\"token operator\\">===</span> <span class=\\"token string\\">\\"狗\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"狗会汪汪叫\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>type <span class=\\"token operator\\">===</span> <span class=\\"token string\\">\\"猫\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"猫会喵喵叫\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">{</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"我也不知道怎么叫\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//改造1，判断的条件比较单一，当所有分支做的事情是类似时</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">cry</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">type</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> map <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">牛</span><span class=\\"token operator\\">:</span><span class=\\"token string\\">\\"牛会哞哞叫\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">狗</span><span class=\\"token operator\\">:</span><span class=\\"token string\\">\\"狗会汪汪叫\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">猫</span><span class=\\"token operator\\">:</span><span class=\\"token string\\">\\"猫会喵喵叫\\"</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>map<span class=\\"token punctuation\\">[</span>type<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>map<span class=\\"token punctuation\\">[</span>type<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">{</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"我也不知道怎么叫\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//改造2，判断的条件比较单一，当分支做的事情有自己的逻辑需要处理</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">cry</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">type</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> map <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function-variable function\\">牛</span><span class=\\"token operator\\">:</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span><span class=\\"token punctuation\\">{</span>\\n      console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"牛在哞哞叫\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function-variable function\\">狗</span><span class=\\"token operator\\">:</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"狗去跑去了\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function-variable function\\">猫</span><span class=\\"token operator\\">:</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"猫在吃鱼\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>map<span class=\\"token punctuation\\">[</span>type<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    map<span class=\\"token punctuation\\">[</span>type<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//如果存在对应的映射关系，则执行相关的函数</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">{</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"我也不知道怎么叫\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//改造3，判断的条件比较复杂，分支做的事情有自己的逻辑需要处理</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">cry</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">type</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">//定义一个数组，数组中每一项数组包含两项内容。</span>\\n  <span class=\\"token comment\\">//数组第一个表示传入的参数符合哪一项的复杂条件。数组第二项表示符合第一项条件需要做的业务逻辑</span>\\n  <span class=\\"token keyword\\">const</span> map <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span>\\n    <span class=\\"token punctuation\\">[</span>\\n      <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span>type<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">includes</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"牛\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span>console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"牛在哞哞叫\\"</span><span class=\\"token punctuation\\">)</span> \\n    <span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">[</span>\\n      <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span>type<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">endsWith</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"虎\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span>console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"虎要吃小动物\\"</span><span class=\\"token punctuation\\">)</span> \\n    <span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">[</span>\\n      <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span>type<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">endsWith</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"猫\\"</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span> type<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span>console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"猫出去玩了\\"</span><span class=\\"token punctuation\\">)</span> \\n    <span class=\\"token punctuation\\">]</span>\\n  <span class=\\"token punctuation\\">]</span>\\n  <span class=\\"token comment\\">//传入的参数符合条件的一项</span>\\n  <span class=\\"token keyword\\">const</span> target <span class=\\"token operator\\">=</span> map<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">find</span><span class=\\"token punctuation\\">(</span> <span class=\\"token parameter\\">m</span> <span class=\\"token operator\\">=&gt;</span> m<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    target<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//如果存在符合的，则执行相关的函数</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">{</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"我也不知道怎么叫\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token function\\">cry</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"狗\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
